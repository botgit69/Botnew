const { getTime, drive } = global.utils;

module.exports = {
	config: {
		name: "leave",
		version: "1.4",
		author: "NTKhang",
		category: "events"
	},

	langs: {
		vi: {
			session1: "s√°ng",
			session2: "tr∆∞a",
			session3: "chi·ªÅu",
			session4: "t·ªëi",
			leaveType1: "t·ª± r·ªùi",
			leaveType2: "b·ªã kick",
			defaultLeaveMessage: [
				"{userName} ‡¶π‡¶æ‡¶Ø‡¶º! ‡¶ö‡¶æ ‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ì ‡¶Æ‡¶ø‡¶∏ ‡¶ï‡¶∞‡¶õ‡ßá, ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶ó‡ßá‡¶≤‡ßã ‚òïüòÇ",
				"{userName} ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶ñ‡¶® ‡ß´‡ß¶% ‡¶ï‡¶Æ ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ üí™ü§£",
				"{userName} ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶°‡¶º‡ßá ‡¶ó‡ßá‡¶≤‡ßã! ‡¶π‡¶Ø‡¶º‡¶§‡ßã ‡¶ï‡ßã‡¶® ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡¶Ø‡¶º ‡¶¶‡ßå‡¶°‡¶º‡¶æ‡¶ö‡ßç‡¶õ‡ßá üèÉ‚Äç‚ôÇÔ∏èüí®",
				"{userName} ‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶ó‡ßá‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶ñ‡¶® ‡¶®‡ßÄ‡¶∞‡¶¨‡¶§‡¶æ üò∂üòÜ",
				"{userName} ‡¶π‡¶æ‡¶Ø‡¶º! ‡¶è‡¶Æ‡¶® ‡¶≤‡¶æ‡¶ó‡¶õ‡ßá ‡¶Ø‡ßá‡¶®‡ßã ‡¶≤‡¶æ‡¶á‡¶ü ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá, ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ö‡¶®‡ßç‡¶ß‡¶ï‡¶æ‡¶∞ üòúüí°",
				"{userName} ‡¶ö‡¶≤‡ßá ‡¶ó‡ßá‡¶≤‡ßã! ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶ï‡ßá‡¶â ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶ú‡ßã‡¶ï‡¶∏‡¶á ‡¶¨‡¶≤‡¶¨‡ßá ‡¶®‡¶æ ‡¶è‡¶ñ‡¶® üòÇ",
				"{userName} ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶§‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶≤‡ßã! ‡¶ï‡ßá‡¶â ‡¶ï‡¶ø ‡¶ì‡¶ï‡ßá ‡¶Ü‡¶ü‡¶ï‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶§‡ßã ‡¶®‡¶æ? üòé",
				"{userName} ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶∏‡¶¨‡¶æ‡¶á ‡¶è‡¶ñ‡¶® ‡¶ö‡ßÅ‡¶™‡¶ö‡¶æ‡¶™ ‡¶¨‡¶∏‡ßá ‡¶Ü‡¶õ‡ßá ü§≠",
				"{userName} ‡¶¨‡¶ø‡¶¶‡¶æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶≤‡ßã! ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶è‡¶ñ‡¶® ‡¶Æ‡¶ú‡¶æ‡¶∞ ‡¶π‡¶æ‡¶π‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ üòπ"
			]
		},
		en: {
			session1: "morning",
			session2: "noon",
			session3: "afternoon",
			session4: "evening",
			leaveType1: "left",
			leaveType2: "was kicked from",
			defaultLeaveMessage: "{userName} {type} the group"
		}
	},

	onStart: async ({ threadsData, message, event, api, usersData, getLang }) => {
		if (event.logMessageType == "log:unsubscribe")
			return async function () {
				const { threadID } = event;
				const threadData = await threadsData.get(threadID);
				if (!threadData.settings.sendLeaveMessage) return;
				const { leftParticipantFbId } = event.logMessageData;
				if (leftParticipantFbId == api.getCurrentUserID()) return;
				const hours = getTime("HH");

				const threadName = threadData.threadName;
				const userName = await usersData.getName(leftParticipantFbId);

				let leaveMessageTemplate = threadData.data.leaveMessage || getLang("defaultLeaveMessage");

				// ‡¶Ø‡¶¶‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶π‡¶Ø‡¶º, ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶æ‡¶ì
				if (Array.isArray(leaveMessageTemplate)) {
					leaveMessageTemplate = leaveMessageTemplate[Math.floor(Math.random() * leaveMessageTemplate.length)];
				}

				const form = {
					mentions: leaveMessageTemplate.match(/\{userNameTag\}/g) ? [{
						tag: userName,
						id: leftParticipantFbId
					}] : null
				};

				let leaveMessage = leaveMessageTemplate
					.replace(/\{userName\}|\{userNameTag\}/g, userName)
					.replace(/\{type\}/g, leftParticipantFbId == event.author ? getLang("leaveType1") : getLang("leaveType2"))
					.replace(/\{threadName\}|\{boxName\}/g, threadName)
					.replace(/\{time\}/g, hours)
					.replace(/\{session\}/g, hours <= 10 ?
						getLang("session1") :
						hours <= 12 ?
							getLang("session2") :
							hours <= 18 ?
								getLang("session3") :
								getLang("session4")
					);

				form.body = leaveMessage;

				if (leaveMessage.includes("{userNameTag}")) {
					form.mentions = [{
						id: leftParticipantFbId,
						tag: userName
					}];
				}

				if (threadData.data.leaveAttachment) {
					const files = threadData.data.leaveAttachment;
					const attachments = files.reduce((acc, file) => {
						acc.push(drive.getFile(file, "stream"));
						return acc;
					}, []);
					form.attachment = (await Promise.allSettled(attachments))
						.filter(({ status }) => status == "fulfilled")
						.map(({ value }) => value);
				}
				message.send(form);
			};
	}
};
